{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANS-1: SKYLEARN- Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. This library, which is largely written in Python, is built upon NumPy, SciPy and Matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Area (sqft)</th>\n",
       "      <th>Price ($)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1600</td>\n",
       "      <td>71600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1980</td>\n",
       "      <td>93300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1840</td>\n",
       "      <td>84300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1710</td>\n",
       "      <td>80600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1550</td>\n",
       "      <td>75200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1470</td>\n",
       "      <td>69700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1710</td>\n",
       "      <td>82000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1540</td>\n",
       "      <td>69400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1620</td>\n",
       "      <td>78700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1500</td>\n",
       "      <td>79600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1720</td>\n",
       "      <td>82600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1600</td>\n",
       "      <td>74500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1700</td>\n",
       "      <td>83500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1440</td>\n",
       "      <td>76300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1520</td>\n",
       "      <td>74000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1960</td>\n",
       "      <td>92890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1700</td>\n",
       "      <td>79500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1420</td>\n",
       "      <td>75600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1520</td>\n",
       "      <td>70000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1900</td>\n",
       "      <td>82600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1640</td>\n",
       "      <td>73600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1900</td>\n",
       "      <td>92100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1860</td>\n",
       "      <td>84700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1700</td>\n",
       "      <td>82600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1590</td>\n",
       "      <td>75900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1410</td>\n",
       "      <td>68700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1770</td>\n",
       "      <td>84700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1550</td>\n",
       "      <td>72400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1600</td>\n",
       "      <td>76700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>1580</td>\n",
       "      <td>82600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1760</td>\n",
       "      <td>83600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>1600</td>\n",
       "      <td>78500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1790</td>\n",
       "      <td>84500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>1480</td>\n",
       "      <td>78500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>1500</td>\n",
       "      <td>72000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1980</td>\n",
       "      <td>92990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>1710</td>\n",
       "      <td>81500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>1400</td>\n",
       "      <td>71300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Area (sqft)  Price ($)\n",
       "1          1600      71600\n",
       "2          1980      93300\n",
       "3          1840      84300\n",
       "4          1710      80600\n",
       "5          1550      75200\n",
       "6          1470      69700\n",
       "7          1710      82000\n",
       "8          1540      69400\n",
       "9          1620      78700\n",
       "10         1500      79600\n",
       "11         1720      82600\n",
       "12         1600      74500\n",
       "13         1700      83500\n",
       "14         1440      76300\n",
       "15         1520      74000\n",
       "16         1960      92890\n",
       "17         1700      79500\n",
       "18         1420      75600\n",
       "19         1520      70000\n",
       "20         1900      82600\n",
       "21         1640      73600\n",
       "22         1900      92100\n",
       "23         1860      84700\n",
       "24         1700      82600\n",
       "25         1590      75900\n",
       "26         1410      68700\n",
       "27         1770      84700\n",
       "28         1550      72400\n",
       "29         1600      76700\n",
       "30         1580      82600\n",
       "31         1760      83600\n",
       "32         1600      78500\n",
       "33         1790      84500\n",
       "34         1480      78500\n",
       "35         1500      72000\n",
       "36         1980      92990\n",
       "37         1710      81500\n",
       "38         1400      71300"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "CellStrat\n",
    "\"\"\"\n",
    "\n",
    "#==============================================================================\n",
    "# Import libraries\n",
    "#==============================================================================\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "#==============================================================================\n",
    "# import the dataset of flat prices\n",
    "#==============================================================================\n",
    "\n",
    "flatdata = pd.read_csv ('Price.csv')\n",
    "X = flatdata.iloc [:,:-1].values\n",
    "y = flatdata.iloc [:,1].values\n",
    "x= flatdata.iloc[1:-1]\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "YES, WE CAN COMBINE TWO COLUMNS INTO ONE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#==============================================================================\n",
    "# split the dataset into training and test set. We will use 1/3 approach\n",
    "#==============================================================================\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split (X, y, test_size = 1/4, \n",
    "                                                     random_state = 0)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#==============================================================================\n",
    "# Fitting the Linear Regression algo to the Training set\n",
    "#==============================================================================\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "regressoragent = LinearRegression()\n",
    "regressoragent.fit (X_train, y_train )            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 3906.75045816 -5593.24954184  -601.04657911  -427.0606292\n",
      "  6493.46395846   139.12828345 -2592.37522908  1195.77153329\n",
      "  5510.80665852  -178.21441662]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#==============================================================================\n",
    "# Now check what our model learned by predicting the X_test values\n",
    "#==============================================================================\n",
    "\n",
    "predictValues = regressoragent.predict(X_test)\n",
    "\n",
    "print(y_test - predictValues)\n",
    "\n",
    "#==============================================================================\n",
    "# So now let us visualize the Training set\n",
    "#==============================================================================\n",
    "plt.scatter(X_train, y_train, color = 'green')\n",
    "plt.plot (X_train, regressoragent.predict (X_train), color = 'red')\n",
    "plt.title ('compare Training result - Area/Price')\n",
    "plt.xlabel('Area of Flat')\n",
    "plt.ylabel('Price')\n",
    "plt.show()\n",
    "\n",
    "#==============================================================================\n",
    "# So now let us visualize the Test set\n",
    "#==============================================================================\n",
    "plt.scatter(X_test, y_test, color = 'green')\n",
    "plt.plot (X_train, regressoragent.predict (X_train), color = 'red')\n",
    "plt.title ('compare Test result - Area/Price')\n",
    "plt.xlabel('Area of Flat')\n",
    "plt.ylabel('Price')\n",
    "plt.show()\n",
    "#=================================================================================\n",
    "# So now plotting the entire set\n",
    "#================================================================================\n",
    "plt.scatter(X_train, y_train, color = 'green')\n",
    "plt.scatter(X_test, y_test, color = 'blue')\n",
    "plt.plot (X_train, regressoragent.predict (X_train), color = 'red')\n",
    "plt.title ('compare ENTIRE result - Area/Price')\n",
    "plt.xlabel('Area of Flat')\n",
    "plt.ylabel('Price')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "ANS-3 NO! OUTPUT PLOTS WILL REMAIN SAME."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "\n",
    "ANS-4 Scikit-learn (Sklearn) is Python's most useful and robust machine learning package. It offers a set of fast tools for machine learning and statistical modeling, such as classification, regression, clustering, and dimensionality reduction, via a Python interface.\n",
    "Scikit-learn is a Python package that makes it easier to apply a variety of Machine Learning (ML) algorithms for predictive data analysis, such as linear regression."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANS-5 the line fit remain linear."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
